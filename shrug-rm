#!/bin/dash
is_format_valid="false"
is_option_force_selected="false"
is_option_cached_selected="false"
last_commit_number=0
commit_branch="master"
last_commit_folder=""
log_file=".shrug/repo/shrug.log"
index_folder=".shrug/index"
temp_rm_print_file=".shrug/repo/rm_print.temp"
file_name_pattern="^[a-zA-Z0-9]+[.|-|_]*"
files=$@

# error: shrug repository does not exist
if [ ! -e ".shrug" ]
then
    echo "shrug-rm: error: no .shrug directory containing shrug repository exists"
    exit 1
fi

# error: no commit exist
if [ -z "`cat $log_file`" ]
then
    echo "shrug-rm: error: your repository does not have any commits yet"
    exit 1
fi

# input format check
# Shrug-rm files ($# >= 1)
if [ $# -ge 1 -a $is_format_valid = "false" ]
then
    if [ $1 != "--force" -a $1 != "--cached" ]
    then
        is_format_valid="true"
    fi
fi

# Shrug-rm --cached files ($# >= 2)
# Shrug-rm --force files ($# >= 2)
if [ $# -ge 2 -a $is_format_valid = "false" ]
then
    if [ $1 = "--cached" -a $2 != "--force" ]
    then  
        is_format_valid="true"
        is_option_cached_selected="true"
    fi

    if [ $1 = "--force" -a $2 != "--cached" ]
    then
        is_format_valid="true"
        is_option_force_selected="true"
    fi
    
    if [ $is_format_valid = "true" ]
    then
        shift 1
        files=$@
    fi
fi

# Shrug-rm --force --cached files ($# >= 3)
# Shrug-rm --cached --force files ($# >= 3)
if [ $# -ge 3 -a $is_format_valid = "false" ]
then
    if [ $1 = "--force" -a $2 = "--cached" ]
    then
        is_format_valid="true"
        is_option_force_selected="true"
    fi

    if [ $1 = "--cached" -a $2 = "--force" ]
    then
        is_format_valid="true"
        is_option_force_selected="true"
    fi

    if [ $is_format_valid = "true" ]
    then
        shift 2
        files=$@
    fi
fi

# check if there is any commands in the files listed in the arguements
for file in $files
do
    echo $file | grep -P -q "^-+"
    if [ $? -eq 0 ] # match pattern found
    then
        is_format_valid="false"
        break
    fi
done

# error: input format is wrong
if [ $is_format_valid = "false" ]
then
    echo "usage: shrug-rm [--force] [--cached] <filenames>"
    exit 1
fi

# error: invalid file name
for file in $files
do
    # error: invalid file name
    echo $file | grep -P -q "^[a-zA-Z0-9]+[.|-|_]*"
    if [ $? -ne 0 ]
    then
        echo "shrug-rm: error: invalid filename '$file'"
        exit 1
    fi
done

# remove duplicated file names
for file in $files
do
    echo $file >> $temp_rm_print_file
done
files=`sort $temp_rm_print_file | uniq`
rm $temp_rm_print_file

# [--cached] option: only remove files in the index folder
if [ $is_option_cached_selected = "true" ]
then
    # error: all files must exist in index, otherwise exit and o not delete any file
    for file in $files
    do
        if [ ! -e "$index_folder/$file" ]
        then
            echo "shrug-rm: error: '$file' is not in the shrug repository"
            exit 1
        fi
    done

    # remove file from index folder
    for file in $files
    do
        rm "$index_folder/$file"
    done
fi

# [] or [--force] option: remove from both current directory and index folder
if [ $is_option_cached_selected = "false" -o $is_option_force_selected = "true" ]
then

    # error: all files must exist in both current directory and index, otherwise exit and do not delete any file
    for file in $files
    do
        if [ ! -e "$file" -o ! -e "$index_folder/$file" ]
        then
            echo "shrug-rm: error: '$file' is not in the shrug repository"
            exit 1
        fi
    done

    # [] option: check if file in current direcory is different from the one in index, otherwise exit and do not delete any file
    if [ $is_option_force_selected = "false" ]
    then
        for file in $files
        do
            # check 1: compare index file with last commit (cannot have staged but uncommitted files)
            last_commit_number=`cat $log_file | tail -n1 | cut -d" " -f1`
            last_commit_folder=".shrug/repo/$commit_branch/$last_commit_number"
            if ! cmp -s "$index_folder/$file" "$last_commit_folder/$file"
            then
                echo "shrug-rm: error: '$file' has changes staged in the index"
                exit 1
            fi

            # chcek 2: compare content of each file (cannot have diff files in cur dir and index )
            if ! cmp -s "$file" "$index_folder/$file"
            then
                echo "shrug-rm: error: '$file' in repository is different to working file"
                exit 1
            fi
        done

        # remove file from both index and current directory
        for file in $files
        do
            rm "$file"
            rm "$index_folder/$file"
        done
    fi
fi

#TODO:
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm a
# a is removed from both current dir and index (no message)
# shrug-rm a
# shrug-rm: error: 'a' is not in the shrug repository

#TODO:
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm --cached b
# b is removed from index only (no message)
# shrug-rm --cached b
# shrug-rm: error: 'b' is not in the shrug repository

#TODO:
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm --cached b
# b is removed from index only (no message)
# shrug-rm --cached a b c
# shrug-rm: error: 'b' is not in the shrug repository (no file is removed)

#TODO:(the operated files in current dir and index are the same, then shrug-rm --force behaves like shrug-rm)
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm --force b
# b is removed from both current dir and index (no message)

#TODO:(handle duplicated file name, no issue)
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm a a a a a a
# a is removed from both current dir and index (no message)

#TODO:(handle duplicated file name, no issue)
# shrug-init
# Initialized empty shrug repository in .shrug
# shrug-add a b c
# shrug-commit -a -m "first commit"
# shrug-rm a b c a b c
# a b c are removed from both current dir and index (no message)

#TODO:(the operated files in the current dir is different from the one in index, then only shrug-rm would report error, shrug-rm --force would not)
# shrug-init
# Initialized empty shrug repository in .shrug
# touch a b c
# shrug-add a b c
# shrug-commit -m "first commit"
# Committed as commit 0
# echo a > a
# echo b > b
# echo c > c
# shrug-rm a
# shrug-rm: error: 'a' in repository is different to working file

# shrug-rm --cached a
# a is removed from index (no message)

# shrug-rm --force a (a exist in current but not in index)
# shrug-rm: error: 'a' is not in the shrug repository

# shrug-rm b
# shrug-rm: error: 'b' in repository is different to working file

# shrug-rm --force b
# b is removed from current dir and index (no message)

#TODO:(changes staged in index that not yet committed)
# shrug-init
# Initialized empty shrug repository in .shrug
# touch a b c
# shrug-add a b c
# shrug-commit -m "first commit"
# Committed as commit 0
# echo a >> a
# shrug-add a
# shrug-rm a
# shrug-rm: error: 'a' has changes staged in the index

#TODO: (when --force --cached are both present, always use --force)
# shrug-init
# Initialized empty shrug repository in .shrug
# touch a b c
# shrug-add a b c
# shrug-commit -m "first commit"
# Committed as commit 0
# shrug-rm --force --cached a
# a is removed from both current dir and index (no message)

# shrug-rm --cached --force b
# b is removed from both current dir and index (no message)
